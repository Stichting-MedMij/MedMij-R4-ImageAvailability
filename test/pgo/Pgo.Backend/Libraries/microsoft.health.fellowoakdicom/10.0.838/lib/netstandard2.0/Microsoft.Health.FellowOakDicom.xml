<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Health.FellowOakDicom</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Health.FellowOakDicom.Core.DicomDecimalString">
            <summary>Decimal String (DS)</summary>
        </member>
        <member name="T:Microsoft.Health.FellowOakDicom.Core.DicomIntegerString">
            <summary>Integer String (IS)</summary>
        </member>
        <member name="T:Microsoft.Health.FellowOakDicom.Core.DicomSignedVeryLong">
            <summary>Signed Very Long (SV)</summary>
        </member>
        <member name="T:Microsoft.Health.FellowOakDicom.Core.DicomUnsignedVeryLong">
            <summary>Unsigned Very Long (UV)</summary>
        </member>
        <member name="T:Microsoft.Health.FellowOakDicom.Core.DicomMultiStringOrNumberElement`1">
            <summary>
            Base class to handle Multi String/Number VR Types
            e.g. DS, IS, SV, and UV
            </summary>
        </member>
        <member name="M:Microsoft.Health.FellowOakDicom.Serialization.DicomArrayJsonConverter.#ctor">
            <summary>
            Initialize the JsonDicomConverter.
            </summary>
            <param name="writeTagsAsKeywords">Whether to write the json keys as DICOM keywords instead of tags. This makes the json non-compliant to DICOM JSON.</param>
        </member>
        <member name="M:Microsoft.Health.FellowOakDicom.Serialization.DicomArrayJsonConverter.#ctor(System.Boolean)">
            <summary>
            Initialize the JsonDicomConverter.
            </summary>
            <param name="writeTagsAsKeywords">Whether to write the json keys as DICOM keywords instead of tags. This makes the json non-compliant to DICOM JSON.</param>
        </member>
        <member name="T:Microsoft.Health.FellowOakDicom.Serialization.NumberSerializationMode">
            <summary>
            Defines the way DICOM numbers (tags with VR: IS, DS, SV and UV) should be serialized
            </summary>
        </member>
        <member name="F:Microsoft.Health.FellowOakDicom.Serialization.NumberSerializationMode.AsNumber">
            <summary>
            Always serialize DICOM numbers (tags with VR: IS, DS, SV and UV) as JSON numbers.
            ⚠️ This will throw FormatException when a number can't be parsed!
            i.e.: "00081160":{"vr":"IS","Value":[76]}
            </summary>
        </member>
        <member name="F:Microsoft.Health.FellowOakDicom.Serialization.NumberSerializationMode.AsString">
            <summary>
            Always serialize DICOM numbers (tags with VR: IS, DS, SV and UV) as JSON strings.
            i.e.: "00081160":{"vr":"IS","Value":["76"]}
            </summary>
        </member>
        <member name="F:Microsoft.Health.FellowOakDicom.Serialization.NumberSerializationMode.PreferablyAsNumber">
            <summary>
            Try to serialize DICOM numbers (tags with VR: IS, DS, SV and UV) as JSON numbers. If not parsable as a number, defaults back to a JSON string.
            This won't throw an error in case a number can't be parsed. It just returns the value as a JSON string.
            i.e.: "00081160":{"vr":"IS","Value":[76]}
            or "00081160":{"vr":"IS","Value":["A non parsable value"]}
            </summary>
        </member>
        <member name="T:Microsoft.Health.FellowOakDicom.Serialization.DicomJsonConverter">
            <summary>
            Converts a DicomDataset object to and from JSON using the NewtonSoft Json.NET library
            </summary>
        </member>
        <member name="M:Microsoft.Health.FellowOakDicom.Serialization.DicomJsonConverter.#ctor(System.Boolean,System.Boolean,Microsoft.Health.FellowOakDicom.Serialization.NumberSerializationMode)">
            <summary>
            Initialize the JsonDicomConverter.
            </summary>
            <param name="writeTagsAsKeywords">Whether to write the json keys as DICOM keywords instead of tags. This makes the json non-compliant to DICOM JSON.</param>
            <param name="autoValidate">Whether the content of DicomItems shall be validated when deserializing.</param>
            <param name="numberSerializationMode">Defines how numbers should be serialized. Default 'AsNumber', will throw errors when a number is not parsable.</param>
        </member>
        <member name="M:Microsoft.Health.FellowOakDicom.Serialization.DicomJsonConverter.Write(System.Text.Json.Utf8JsonWriter,FellowOakDicom.DicomDataset,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Health.FellowOakDicom.Serialization.DicomJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader"/> to read from.</param>
            <param name="typeToConvert">Type of the object.</param>
            <param name="options">Options to apply while reading.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Microsoft.Health.FellowOakDicom.Serialization.DicomJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Health.FellowOakDicom.Serialization.DicomJsonConverter.CreateBulkDataUriByteBuffer(System.String)">
            <summary>
            Create an instance of a IBulkDataUriByteBuffer. Override this method to use a different IBulkDataUriByteBuffer implementation in applications.
            </summary>
            <param name="bulkDataUri">The URI of a bulk data element as defined in <see cref="!:http://dicom.nema.org/medical/dicom/current/output/chtml/part19/chapter_A.html#table_A.1.5-2">Table A.1.5-2 in PS3.19</see>.</param>
            <returns>An instance of a Bulk URI Byte buffer.</returns>
        </member>
        <member name="M:Microsoft.Health.FellowOakDicom.Serialization.DicomJsonConverter.FixDecimalString(System.String)">
            <summary>
            Fix-up a Dicom DS number for use with json.
            Rationale: There is a requirement that DS numbers shall be written as json numbers in part 18.F json, but the
            requirements on DS allows values that are not json numbers. This method "fixes" them to conform to json numbers.
            </summary>
            <param name="val">A valid DS value</param>
            <returns>A json number equivalent to the supplied DS value</returns>
        </member>
    </members>
</doc>
